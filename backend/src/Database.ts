//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { CustomersEntity } from './db/Customers.entity';
import { WorkoutsEntity } from './db/Workouts.entity';
import { NutritionEntity } from './db/Nutrition.entity';
import { HealthMetricsEntity } from './db/HealthMetrics.entity';
import { NotificationsEntity } from './db/Notifications.entity';
import { SupportTicketsEntity } from './db/SupportTickets.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      CustomersEntity,
      WorkoutsEntity,
      NutritionEntity,
      HealthMetricsEntity,
      NotificationsEntity,
      SupportTicketsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        {
          userId: 1,
          name: 'name 1',
          email: 'email 1',
          password: 'password 1',
          role: 'role 1',
          id: 57,
        },
        {
          userId: 2,
          name: 'name 2',
          email: 'email 2',
          password: 'password 2',
          role: 'role 2',
          id: 99,
        },
        {
          userId: 3,
          name: 'name 3',
          email: 'email 3',
          password: 'password 3',
          role: 'role 3',
          id: 6,
        },
        {
          userId: 4,
          name: 'name 4',
          email: 'email 4',
          password: 'password 4',
          role: 'role 4',
          id: 69,
        },
        {
          userId: 5,
          name: 'name 5',
          email: 'email 5',
          password: 'password 5',
          role: 'role 5',
          id: 75,
        },
      ],
      Customers: [
        {
          customerId: 1,
          email: 'email 1',
          password: 'password 1',
          name: 'name 1',
          age: 1,
          gender: 'gender 1',
          weight: 0.41,
          height: 0.28,
          healthConditions: 'healthConditions 1',
          goals: 'goals 1',
          dietaryPreferences: 'dietaryPreferences 1',
          billingAddress: 'billingAddress 1',
          country: 'country 1',
          phone: 'phone 1',
          id: 47,
        },
        {
          customerId: 2,
          email: 'email 2',
          password: 'password 2',
          name: 'name 2',
          age: 2,
          gender: 'gender 2',
          weight: 0.21,
          height: 0.78,
          healthConditions: 'healthConditions 2',
          goals: 'goals 2',
          dietaryPreferences: 'dietaryPreferences 2',
          billingAddress: 'billingAddress 2',
          country: 'country 2',
          phone: 'phone 2',
          id: 6,
        },
        {
          customerId: 3,
          email: 'email 3',
          password: 'password 3',
          name: 'name 3',
          age: 3,
          gender: 'gender 3',
          weight: 0.13,
          height: 0.94,
          healthConditions: 'healthConditions 3',
          goals: 'goals 3',
          dietaryPreferences: 'dietaryPreferences 3',
          billingAddress: 'billingAddress 3',
          country: 'country 3',
          phone: 'phone 3',
          id: 86,
        },
        {
          customerId: 4,
          email: 'email 4',
          password: 'password 4',
          name: 'name 4',
          age: 4,
          gender: 'gender 4',
          weight: 0.51,
          height: 0.15,
          healthConditions: 'healthConditions 4',
          goals: 'goals 4',
          dietaryPreferences: 'dietaryPreferences 4',
          billingAddress: 'billingAddress 4',
          country: 'country 4',
          phone: 'phone 4',
          id: 85,
        },
        {
          customerId: 5,
          email: 'email 5',
          password: 'password 5',
          name: 'name 5',
          age: 5,
          gender: 'gender 5',
          weight: 0.26,
          height: 0.76,
          healthConditions: 'healthConditions 5',
          goals: 'goals 5',
          dietaryPreferences: 'dietaryPreferences 5',
          billingAddress: 'billingAddress 5',
          country: 'country 5',
          phone: 'phone 5',
          id: 73,
        },
      ],
      Workouts: [
        {
          workoutId: 1,
          customerId: 1,
          type: 'type 1',
          duration: 0.47,
          intensity: 'intensity 1',
          caloriesBurned: 0.09,
          date: '2023-10-18T11:57:55.220Z',
          id: 38,
        },
        {
          workoutId: 2,
          customerId: 2,
          type: 'type 2',
          duration: 0.36,
          intensity: 'intensity 2',
          caloriesBurned: 0.9,
          date: '2023-10-13T10:43:13.729Z',
          id: 8,
        },
        {
          workoutId: 3,
          customerId: 3,
          type: 'type 3',
          duration: 0.04,
          intensity: 'intensity 3',
          caloriesBurned: 0.29,
          date: '2024-03-31T14:27:30.248Z',
          id: 78,
        },
        {
          workoutId: 4,
          customerId: 4,
          type: 'type 4',
          duration: 0.94,
          intensity: 'intensity 4',
          caloriesBurned: 0.49,
          date: '2023-12-30T01:17:42.441Z',
          id: 99,
        },
        {
          workoutId: 5,
          customerId: 5,
          type: 'type 5',
          duration: 0.68,
          intensity: 'intensity 5',
          caloriesBurned: 0.87,
          date: '2024-03-08T14:36:52.032Z',
          id: 89,
        },
      ],
      Nutrition: [
        {
          mealId: 1,
          customerId: 1,
          foodItem: 'foodItem 1',
          quantity: 0.77,
          calories: 0.6,
          macronutrients: 'macronutrients 1',
          date: '2024-04-21T05:29:41.152Z',
          id: 72,
        },
        {
          mealId: 2,
          customerId: 2,
          foodItem: 'foodItem 2',
          quantity: 0.82,
          calories: 0.09,
          macronutrients: 'macronutrients 2',
          date: '2024-04-18T00:53:42.453Z',
          id: 85,
        },
        {
          mealId: 3,
          customerId: 3,
          foodItem: 'foodItem 3',
          quantity: 0.5,
          calories: 0.11,
          macronutrients: 'macronutrients 3',
          date: '2024-02-19T18:42:16.529Z',
          id: 12,
        },
        {
          mealId: 4,
          customerId: 4,
          foodItem: 'foodItem 4',
          quantity: 0.8,
          calories: 0.11,
          macronutrients: 'macronutrients 4',
          date: '2025-02-24T19:44:06.042Z',
          id: 82,
        },
        {
          mealId: 5,
          customerId: 5,
          foodItem: 'foodItem 5',
          quantity: 0.57,
          calories: 0.01,
          macronutrients: 'macronutrients 5',
          date: '2024-04-08T15:27:28.334Z',
          id: 53,
        },
      ],
      HealthMetrics: [
        {
          metricId: 1,
          customerId: 1,
          type: 'type 1',
          value: 0.86,
          unit: 'unit 1',
          date: '2023-06-05T08:42:13.634Z',
          id: 78,
        },
        {
          metricId: 2,
          customerId: 2,
          type: 'type 2',
          value: 0.11,
          unit: 'unit 2',
          date: '2024-10-10T17:54:32.959Z',
          id: 33,
        },
        {
          metricId: 3,
          customerId: 3,
          type: 'type 3',
          value: 0.25,
          unit: 'unit 3',
          date: '2025-03-03T12:33:02.127Z',
          id: 21,
        },
        {
          metricId: 4,
          customerId: 4,
          type: 'type 4',
          value: 0.75,
          unit: 'unit 4',
          date: '2024-01-21T13:08:19.459Z',
          id: 96,
        },
        {
          metricId: 5,
          customerId: 5,
          type: 'type 5',
          value: 0.47,
          unit: 'unit 5',
          date: '2024-03-24T22:40:54.603Z',
          id: 66,
        },
      ],
      Notifications: [
        {
          notificationId: 1,
          customerId: 1,
          type: 'type 1',
          message: 'message 1',
          dateScheduled: '2025-02-15T22:15:25.639Z',
          status: 'status 1',
          id: 35,
        },
        {
          notificationId: 2,
          customerId: 2,
          type: 'type 2',
          message: 'message 2',
          dateScheduled: '2023-07-01T04:28:27.703Z',
          status: 'status 2',
          id: 25,
        },
        {
          notificationId: 3,
          customerId: 3,
          type: 'type 3',
          message: 'message 3',
          dateScheduled: '2023-07-05T04:22:28.824Z',
          status: 'status 3',
          id: 42,
        },
        {
          notificationId: 4,
          customerId: 4,
          type: 'type 4',
          message: 'message 4',
          dateScheduled: '2024-01-28T06:53:00.206Z',
          status: 'status 4',
          id: 99,
        },
        {
          notificationId: 5,
          customerId: 5,
          type: 'type 5',
          message: 'message 5',
          dateScheduled: '2023-07-09T00:59:13.978Z',
          status: 'status 5',
          id: 88,
        },
      ],
      SupportTickets: [
        {
          ticketId: 1,
          userId: 1,
          customerId: 1,
          description: 'description 1',
          status: 'status 1',
          creationDate: '2023-11-12T19:47:59.661Z',
          resolutionDate: '2024-03-23T03:45:33.077Z',
          id: 56,
        },
        {
          ticketId: 2,
          userId: 2,
          customerId: 2,
          description: 'description 2',
          status: 'status 2',
          creationDate: '2025-03-22T21:56:13.439Z',
          resolutionDate: '2024-11-22T07:18:50.889Z',
          id: 30,
        },
        {
          ticketId: 3,
          userId: 3,
          customerId: 3,
          description: 'description 3',
          status: 'status 3',
          creationDate: '2024-06-19T14:43:41.879Z',
          resolutionDate: '2024-01-27T12:47:29.933Z',
          id: 13,
        },
        {
          ticketId: 4,
          userId: 4,
          customerId: 4,
          description: 'description 4',
          status: 'status 4',
          creationDate: '2025-02-07T02:48:11.627Z',
          resolutionDate: '2024-07-14T11:45:31.071Z',
          id: 59,
        },
        {
          ticketId: 5,
          userId: 5,
          customerId: 5,
          description: 'description 5',
          status: 'status 5',
          creationDate: '2025-02-08T10:31:05.666Z',
          resolutionDate: '2024-01-17T11:58:00.246Z',
          id: 0,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('CustomersEntity', data.Customers);
      await this.SeedResource('WorkoutsEntity', data.Workouts);
      await this.SeedResource('NutritionEntity', data.Nutrition);
      await this.SeedResource('HealthMetricsEntity', data.HealthMetrics);
      await this.SeedResource('NotificationsEntity', data.Notifications);
      await this.SeedResource('SupportTicketsEntity', data.SupportTickets);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
